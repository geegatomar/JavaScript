====================================================================================================================================================================
JAVASCRIPT

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
Javascript is a scripting language.

Basically, all scripting languages are programming languages. The theoretical difference between the two is that scripting languages do not require the compilation step and are rather interpreted. For example, normally, a C program needs to be compiled before running whereas normally, a scripting language like JavaScript or PHP need not be compiled.

 As the name suggest, it’s all about giving the script to perform some certain task. Scripting languages are basically the subcategory of programming languages which is used to give guidance to another program or we can say to control another program, so it also involves instructions. It basically connects one language to one another languages and doesn’t work standalone. Javascript, PHP, Perl, Python, VBScript these all are the examples of scripting language. Scripting languages need to be interpreted (Scanning the code line by line, not like compiler in one go) instead of compiled. There is no scope of compiler in scripting languages. Scripting languages are most widely used to create a website.
 
 Hence types of languages- 
 1. Programming Languages : C, C++, Java
 2. Scripting languages : Python, Javascript
 3. Markup Languages : HTML, CSS
 
 

Programming vs Scripting vs Markup
 
 So we can say that all the scripting languages are programming languages but all the programming languages are not scripting languages. C cannot be called a scripting language, it is just a programming language but we can call JavaScript or Php programming or scripting languages. Also, there is no need to compile scripting languages it only needs to be interpreted. Scripting languages are generally slower than programming languages because compiled programs are first converted into machine code. On the other hand, markup languages are just used to define the structure of data which doesn’t require any logic or algorithm

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

How is HTML displayed on the browser?

The HTML code needs to be understood by the browser to be able to display the webpage accordingly. So the HTML first gets parsed into a tree (DOM). Then the browser uses the <style> CSS elements to position the elements on the page. 
HTML is neither interpreted nor compiled, since it is not a programming language

So the function of the web browser is to "render" HTML + CSS, and "interpret" JavaScript

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

We use <script> tags to let the HTML know that theres javascript code coming
<script src="./app.js"> </script> 

To view the console messagesin chrome, go to : More tools --> Developer tools --> Console

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

Variables and data-types in JavaScript

There are mainly 3 keywords used to declare variables:
var
const
let

ex:  var name = 'shiv';	var number = 34;	const name = 'shloka';

Earlier var was used. But now "const" and "let" are used.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

String concatenation

const name = "shivangi";
const age = 20;

Old method to concatenate and print: 		console.log("Hello my name is " + name + " and i'm " + age);
New, better method:				console.log(`Hello my name is ${name} and i'm ${age});

Hence use ${ }
And note that its not single quotation('), but its the backward quote(`)
--------------------------------------------------------------------------------------------------------------------------------------------------------------------

for loops:

for(name of names){
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

object

const user = {
    user_name: "Shiv j",
    age: 30,
    married: false,
    purchase: ['phone', 'car', 'laptop']
};

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

class and id in HTML

ID's and classes are “hooks”! We need ways to describe content in an HTML. Hence they're used to give them names and uniquely identify them.
Difference between id and class attribute: The only difference between them is that “id” is unique in a page and can only apply to at most one element, while “class” selector can apply to multiple elements.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

The HTML DOM (Document Object Model)


When a web page is loaded, the browser creates a Document Object Model of the page.
The HTML DOM model is constructed as a tree of Objects. The DOM defines a standard for accessing documents:
"The W3C Document Object Model (DOM) is a platform and language-neutral interface that allows programs and scripts to dynamically access and update the content, structure, and style of a document."

The HTML DOM is a standard object model and programming interface for HTML. It defines:

. The HTML elements as objects
. The properties of all HTML elements
. The methods to access all HTML elements
. The events for all HTML elements

--------------------------------------------------------------------------------------------------------------------------------------------------------------------


To get the object of the HTML DOM model, we can use methods such as:

document.getElementById('')
document.querySelector('')
document.querySelectorAll('')
document.addEventListener('', function(){})        : this takes two arguments as input, first one is the event (ex : click), and second is the function you want 							      to execute on the happening of that event

(note: try using single quotes everywhere to avoid confusion)
--------------------------------------------------------------------------------------------------------------------------------------------------------------------

Note: 
Write <script> tag in body, not in head (it doesnt detect before the page has loaded and DOM objects have been created)

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

Note:

'onload' is understood by HTML, and not by Javascript. Hence, if you are writing js part in HTML file, then use things like onload="myFunction()" in the body tag.
But if you are separating the HTML and the js, then use methods on the document object, such as document.addEventListener()...


ex:
either you do it in the html file : 	<body onload="alert('Yes you got it');">  </body>
or you do it in the js file       : 	document.addEventListener('load', alert("Yes you got it"));

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

Convention for naming in JS:

FULLCAPS            : for const 
UseCamelCase        : for naming JavaScript objects
useLowerCamelCase   : for functions and variables
smallcase           : for class="" and id="" names

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

use parseInt() and parseFloat() to explicitly convert string/text to int/float, to avoid errors like: "1" + "2" ==> "12" (but you expected 3)

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

NaN means 'Not a Number' 
and isNaN() is used to check if valid int number is entered or not

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

How does the id HTML attribute tie web elements to JavaScript code?

Think of the id attribute as the portal through which JavaScript code accesses HTML content. When people say JavaScript code runs on a web page, they don’t literally mean the web page itself—they mean the browser. In reality, JavaScript code is fairly insulated from HTML code, and can only access it through very specific mechanisms. One of these mechanisms involves the id attribute, which lets JavaScript retrieve an HTML element. Tagging a web element with an ID allows the element to be found by JavaScript code, opening up all kinds of scripting possibilities

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

To check if a substring occurs in string, or if an element is present in an array, we use 	.indexOf("") == -1

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

Once a page has been delivered to the browser, the server is largely out of the equation. Virtually everything that JavaScript does from there on out is confined to the browser. This makes pages more responsive since they don’t have to wait for the server to process and return data. This process is why JavaScript is known as a client language.
The web browser has the ability to run JavaScript code using JavaScript interpreter.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

Your client web browser is responsible for running JavaScript code, which allows scripts access to the client environment.
Examples of things that the browser can control : 
1. Browser metrics
2. Browser history
3. Timers                    : ex - setTimeout("alert()", 1000*60*5);
4. Cookies

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

Some of the basic events that are triggered and are written in the body tag are: onload, onresize, onclick, onhover

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

What are cookies?

Unfortunately, JavaScript variables are fleeting, and are destroyed the moment the browser closes or the page refreshes. Browser cookies offer a way to store data persistently so that it lasts beyond the life cycle of a script.
A cookie is a piece of data stored by the browser on the user’s computer.
Cookies are a lot like JavaScript variables except that cookies hang around after you close the browser, reload a page, turn off your computer, remodel your house, etc. 

The browser maintains a collection of cookies that have been created by different web pages. 
The browser stores the user name cookie on their hard disk for safe keeping.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

Difference between Cache and Cookie?

Both Cache and Cookies were fabricated to spice up up web site performance and to create it additional accessible through storing some data on the client-side machine.

The main difference between Cache and Cookie is that, Cache is used to store online page resources during a browser for the long run purpose or to decrease the loading time. On the other hand, cookies are employed to store user choices such as browsing session to trace the user preferences.


Note: 
Caches are of many kinds, here we are referring to the browser's cache. So the browsres cache data is also stored on the harddisk itself (even cookies are stored on the harddisk). This is done because loading data from the harddisk is faster than loading it from the server. Hence cache is useful for faster loading of pages. 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------


